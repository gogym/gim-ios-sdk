// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Message.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///指定版本，必须要写（proto3、proto2）

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 协议标志
  var identify: String {
    get {return _storage._identify}
    set {_uniqueStorage()._identify = newValue}
  }

  /// 协议版本
  var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  /// 请求类型
  var reqType: Int32 {
    get {return _storage._reqType}
    set {_uniqueStorage()._reqType = newValue}
  }

  ///消息时间
  var msgTime: Int64 {
    get {return _storage._msgTime}
    set {_uniqueStorage()._msgTime = newValue}
  }

  ///消息唯一id
  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var body: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._body ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._body = newValue}
  }
  /// Returns true if `body` has been explicitly set.
  var hasBody: Bool {return _storage._body != nil}
  /// Clears the value of `body`. Subsequent reads from it will return its default value.
  mutating func clearBody() {_uniqueStorage()._body = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identify"),
    2: .same(proto: "version"),
    4: .same(proto: "reqType"),
    6: .same(proto: "msgTime"),
    7: .same(proto: "id"),
    8: .same(proto: "body"),
  ]

  fileprivate class _StorageClass {
    var _identify: String = String()
    var _version: String = String()
    var _reqType: Int32 = 0
    var _msgTime: Int64 = 0
    var _id: String = String()
    var _body: SwiftProtobuf.Google_Protobuf_Any? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identify = source._identify
      _version = source._version
      _reqType = source._reqType
      _msgTime = source._msgTime
      _id = source._id
      _body = source._body
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._identify)
        case 2: try decoder.decodeSingularStringField(value: &_storage._version)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._reqType)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._msgTime)
        case 7: try decoder.decodeSingularStringField(value: &_storage._id)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._body)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._identify.isEmpty {
        try visitor.visitSingularStringField(value: _storage._identify, fieldNumber: 1)
      }
      if !_storage._version.isEmpty {
        try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 2)
      }
      if _storage._reqType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._reqType, fieldNumber: 4)
      }
      if _storage._msgTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._msgTime, fieldNumber: 6)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 7)
      }
      if let v = _storage._body {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Message, rhs: Message) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._identify != rhs_storage._identify {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._reqType != rhs_storage._reqType {return false}
        if _storage._msgTime != rhs_storage._msgTime {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._body != rhs_storage._body {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
